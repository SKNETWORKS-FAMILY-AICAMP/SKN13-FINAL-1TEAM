// ‚úÖ preload.js (ÏõêÎûò Íµ¨Ï°∞ Ïú†ÏßÄ + fsBridge.openDoc Ï∂îÍ∞Ä)
const { contextBridge, ipcRenderer } = require("electron");

// ÎÇ¥Î∂Ä Ìó¨Ìçº: Î¶¨Ïä§ÎÑà ÎûòÌïë(Ïù¥Î≤§Ìä∏ Í∞ùÏ≤¥ Ï†úÍ±∞)
const wrap = (cb) =>
  typeof cb === "function" ? (_e, ...args) => cb(...args) : () => {};

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// electron API ÎûòÌçº (Í∏∞Ï°¥ Í∑∏ÎåÄÎ°ú)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const electronAPI = {
  ipcRenderer: {
    // Í∏∞Ï°¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö© Í∞ÄÎä•
    send: (channel, ...args) => ipcRenderer.send(channel, ...args),
    // Í∏∞Ï°¥: invoke(channel, data) ‚Üí Ìò∏Ìôò Ïú†ÏßÄ + Í∞ÄÎ≥Ä Ïù∏Ïûê ÏßÄÏõê
    invoke: (channel, ...args) => ipcRenderer.invoke(channel, ...args),

    // on: Îì±Î°ù ÌõÑ Ìï¥Ï†ú Ìï®Ïàò Î∞òÌôò(ÏÑ†ÌÉù ÏÇ¨Ïö©)
    on: (channel, callback) => {
      const fn = wrap(callback);
      ipcRenderer.on(channel, fn);
      return () => ipcRenderer.removeListener(channel, fn);
    },
    // ÌïúÎ≤àÎßå
    once: (channel, callback) => {
      ipcRenderer.once(channel, wrap(callback));
    },
    // off: ÌäπÏ†ï ÏΩúÎ∞±Îßå Ï†úÍ±∞(ÏóÜÏúºÎ©¥ Ï†ÑÎ∂Ä Ï†úÍ±∞)
    off: (channel, callback) => {
      if (callback) ipcRenderer.removeListener(channel, wrap(callback));
      else ipcRenderer.removeAllListeners(channel);
    },
    // ÌïÑÏöîÏãú Ï†ÑÏ≤¥ Ï†úÍ±∞Ïö©
    removeAllListeners: (channel) => ipcRenderer.removeAllListeners(channel),
  },

  // ‚úÖ Í∏∞Ï°¥ ÎÖ∏Ï∂ú Ïú†ÏßÄ
  isWindowMaximized: () => ipcRenderer.invoke("check-maximized"),

  // Ï∞Ω Î¶¨ÏÇ¨Ïù¥Ï¶à Ïù¥Î≤§Ìä∏ (Îì±Î°ù Ïãú Ïñ∏Î†àÏßÄÏä§ÌÑ∞ Ìï®Ïàò Î∞òÌôò)
  onWindowResize: (callback) => {
    const fn = wrap(callback);
    ipcRenderer.on("window-resized", fn);
    return () => ipcRenderer.removeListener("window-resized", fn);
  },
  offWindowResize: (callback) =>
    ipcRenderer.removeListener("window-resized", callback),

  // üìÑ S3 ÏóÖÎ°úÎìú URL ÏöîÏ≤≠(Í∏∞Ï°¥ Ïú†ÏßÄ)
  getS3UploadUrl: (fileName) => ipcRenderer.invoke("get-s3-upload-url", fileName),
};

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/** fsBridge: Î°úÏª¨ ÌååÏùº Î∏åÎ¶øÏßÄ (Í∏∞Ï°¥ Í∑∏ÎåÄÎ°ú + openDoc Ï∂îÍ∞Ä) */
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const fsBridge = {
  listDocs: (subdir = "") => ipcRenderer.invoke("fs:listDocs", subdir),
  readDoc: (path) => ipcRenderer.invoke("fs:readDoc", path),
  saveDoc: (payload) => ipcRenderer.invoke("fs:saveDoc", payload), // { name, content, subdir? }
  deleteDoc: (path) => ipcRenderer.invoke("fs:deleteDoc", path),
  // üëá ÏÉàÎ°ú Ï∂îÍ∞Ä: OS Í∏∞Î≥∏Ïï±ÏúºÎ°ú Ïó¥Í∏∞
  openDoc: (path) => ipcRenderer.invoke("fs:open", path),
};

// ÎÖ∏Ï∂ú
contextBridge.exposeInMainWorld("electron", electronAPI);
contextBridge.exposeInMainWorld("fsBridge", fsBridge);

// (ÏÑ†ÌÉù) Î≥ÄÏ°∞ Î∞©ÏßÄ
Object.freeze(electronAPI);
Object.freeze(electronAPI.ipcRenderer);
Object.freeze(fsBridge);
