# [상세] Gemini와 함께 설계한 장고 백엔드 시스템 명세서

## 1. 프로젝트 목표 및 핵심 요구사항

- **프로젝트 타입**: LLM(거대 언어 모델)을 활용하는 서비스형 소프트웨어(SaaS)
- **프론트엔드**: React 기반의 웹 애플리케이션
- **핵심 기능**:
    1.  **멀티테넌시(Multi-tenancy)**: 여러 회사(또는 팀, 환경)가 각자의 독립된 공간(Workspace)을 가지고 서비스를 사용한다.
    2.  **사용자 관리**: 사용자는 서비스에 가입하고, 하나 이상의 워크스페이스에 소속될 수 있다.
    3.  **워크스페이스 관리**: 사용자는 새로운 워크스페이스를 직접 생성하거나, 기존 워크스페이스에 초대/코드를 통해 가입할 수 있다.
    4.  **데이터 격리**: 각 워크스페이스의 데이터(특히, LLM 학습에 사용될 파일)는 다른 워크스페이스로부터 완벽히 격리되어야 한다.
    5.  **LLM 연동**: 워크스페이스별로 업로드된 파일(사내 규정 등)을 벡터화하여, 해당 워크스페이스의 LLM 에이전트에게 컨텍스트로 제공한다.

---

## 2. 최종 아키텍처 설계안

논의를 통해, 유지보수성, 확장성, 보안을 극대화하기 위해 장고의 설계 철학을 적극적으로 따르는 아래와 같은 구조를 채택한다.

### 2.1. 핵심 설계 원칙

- **관심사 분리 (Separation of Concerns)**: 모든 코드를 한 곳에 두지 않고, 기능적으로 명확하게 구분되는 '앱(App)' 단위로 모듈화한다.
- **데이터베이스 중심 (Database-centric)**: 서버의 파일 시스템을 직접 제어하기보다, 모든 정보(사용자, 소속, 파일의 위치 등)를 데이터베이스로 관리하여 데이터의 무결성을 보장하고, 장고의 강력한 ORM(객체 관계 매핑) 기능을 최대한 활용한다.
- **초기 설계의 중요성**: 데이터베이스와 직접 연관되는 앱(App)의 이름과 모델(Model)의 구조는 한번 마이그레이션(migrate)되면 변경이 매우 복잡하므로, 초기 설계 단계에서 신중하게 결정한다.

### 2.2. 디렉터리 구조

```
SKN13-FINAL-1TEAM/
├── backend/
│   ├── manage.py
│   ├── config/         # 👈 프로젝트 전반의 설정 (settings.py, urls.py 등)
│   ├── accounts/       # 👈 사용자 계정, 인증, 프로필 등
│   ├── workspaces/     # 👈 워크스페이스 생성, 멤버 관리, 초대 등
│   └── llm_services/   # 👈 LLM 관련 기능, 파일 업로드 및 관리 등
└── DB_talking1.txt
```

### 2.3. 상세 데이터베이스 모델 설계

#### 🅰️ `accounts` 앱 (사용자 계정)

- **`User` 모델** (장고의 내장 `AbstractUser`를 사용하거나 확장)
    - **목적**: 서비스의 고유한 사용자 계정 정보. 어떤 워크스페이스에 소속되든 변하지 않는 정보.
    - **주요 필드**:
        - `id` (PK): 자동 생성 고유 번호
        - `email` (CharField, unique=True): **로그인 ID로 사용될 이메일 주소**
        - `password` (CharField): 장고에 의해 자동으로 안전하게 해싱되어 저장
        - `username` (CharField): 사용자 이름/닉네임
        - `date_joined` (DateTimeField): 서비스 가입 일시

#### 🅱️ `workspaces` 앱 (회사 및 멤버십)

- **`Workspace` 모델**
    - **목적**: 각 회사/팀에 해당하는 독립된 공간(워크스페이스) 정보.
    - **주요 필드**:
        - `id` (PK): 자동 생성 고유 번호
        - `name` (CharField): 워크스페이스 이름 (예: "SKN 주식회사")
        - `owner` (ForeignKey to `User`): 이 워크스페이스를 최초로 생성한 사용자.
        - `created_at` (DateTimeField): 워크스페이스 생성 일시
        - `join_code` (CharField, optional): 다른 사용자가 가입할 때 사용할 수 있는 고유 암호.

- **`WorkspaceMember` 모델**
    - **목적**: **가장 핵심적인 모델.** `User`와 `Workspace`를 연결하며, 사용자가 특정 워크스페이스 내에서 가지는 역할과 정보를 정의.
    - **주요 필드**:
        - `id` (PK): 자동 생성 고유 번호
        - `user` (ForeignKey to `User`): 소속된 사용자 계정
        - `workspace` (ForeignKey to `Workspace`): 소속된 워크스페이스
        - `work_email` (EmailField): 해당 워크스페이스에서 사용하는 사무용 이메일
        - `department` (CharField): 사내 소속 부서명
        - `team` (CharField): 사내 소속 팀명
        - `position` (CharField): 사내 직급
        - `hire_date` (DateField): 입사 날짜
        - `role` (CharField): 워크스페이스 내 권한 (예: 'admin', 'member')

#### 🆎 `llm_services` 앱 (파일 및 LLM 서비스)

- **`WorkspaceDocument` 모델**
    - **목적**: 각 워크스페이스에 업로드된 파일(사내 규정, 매뉴얼 등)을 관리.
    - **주요 필드**:
        - `id` (PK): 자동 생성 고유 번호
        - `workspace` (ForeignKey to `Workspace`): 이 문서가 속한 워크스페이스.
        - `document` (FileField): **실제 파일.** `upload_to` 옵션을 통해 회사별로 분리된 경로에 저장됨.
        - `description` (TextField): 파일에 대한 설명.
        - `uploaded_by` (ForeignKey to `User`): 파일을 업로드한 사용자.
        - `uploaded_at` (DateTimeField): 파일 업로드 일시.

---

## 3. 핵심 기능 구현 시나리오

### 3.1. 파일 처리 및 "회사별 폴더" 구현 방법

- **설정**: `config/settings.py`에 `MEDIA_ROOT`와 `MEDIA_URL`을 정의하여 모든 업로드 파일을 한 곳(`media/` 폴더)에서 관리하도록 설정.
- **동적 경로 생성**: `WorkspaceDocument` 모델의 `FileField`에 `upload_to` 속성을 사용하여, 파일이 업로드될 때 자동으로 경로를 생성.
    ```python
    # llm_services/models.py
    def get_workspace_document_path(instance, filename):
        # 결과: 'workspaces/12/documents/my_rule.pdf' 와 같은 경로 반환
        return f'workspaces/{instance.workspace.id}/documents/{filename}'

    class WorkspaceDocument(models.Model):
        # ...
        document = models.FileField(upload_to=get_workspace_document_path)
    ```
- **동작**: ID가 12인 워크스페이스의 사용자가 파일을 올리면, 실제 파일은 서버의 `media/workspaces/12/documents/` 폴더 안에 저장되고, 이 경로 정보가 데이터베이스에 기록된다. 이를 통해 완벽한 데이터 격리가 구현된다.

### 3.2. 사용자 시나리오별 데이터 흐름

1.  **신규 회원 가입**:
    - 사용자가 이메일, 이름, 비밀번호를 입력하면 `accounts.User` 테이블에 새로운 레코드가 1개 생성된다.

2.  **새 워크스페이스 생성**:
    - 사용자가 워크스페이스 이름을 입력하면,
    1. `workspaces.Workspace` 테이블에 레코드가 1개 생성된다 (`owner`는 현재 로그인한 사용자).
    2. `workspaces.WorkspaceMember` 테이블에 레코드가 1개 생성되어, 방금 만든 사용자와 워크스페이스를 연결하고 `role`을 'admin'으로 지정한다.

3.  **기존 워크스페이스에 코드로 가입**:
    - 사용자가 가입 코드를 입력하면,
    1. `workspaces.Workspace` 테이블에서 해당 코드를 가진 워크스페이스를 찾는다.
    2. 찾으면, `workspaces.WorkspaceMember` 테이블에 레코드를 1개 생성하여 현재 사용자와 해당 워크스페이스를 연결한다 (`role`은 'member').

4.  **LLM 에이전트가 "A회사"의 자료 참조**:
    1. "A회사"에 해당하는 `Workspace`의 ID를 찾는다.
    2. `llm_services.WorkspaceDocument` 테이블에서 `workspace_id`가 "A회사"의 ID와 일치하는 모든 문서를 조회한다.
    3. 조회된 문서들의 파일 경로(`document.path`)를 가져와 벡터화 작업을 수행하고, LLM의 컨텍스트로 주입한다.